-- Haskell Playground 1.0
interp "bind n = 1 in bind f = (lambda (x:Nat) in x + n) in bind n = 10 in app f 1"

interp "bind x=1 in x+1"

interp "app(lambda (x:Nat) in x+1)4"

interp "lambda (x:Nat) in x+1"

interp "bind n = 5 in bind f = (lambda (x:Nat) in x+n) in bind n = 1 in app f 3"

interp "bind fact = (lambda (g:Nat) in (lambda (x:Nat) in (if (isZero x) then 1 else x * (app g x-1)))) in bind factorial = (fix fact) in (app factorial 3)"

interp "if 0 then 2 else 3"

interp "app (fix (lambda (ie:Nat) in (lambda (x:Nat) in if (isZero x) then x else x + app ie x - 1))) 5"

typeof [] (parseFBAE "app (lambda (x:Bool) in if x then 0 else 1) (IsZero 0)")

interp "(app (lambda (n:Nat) in (app (lambda (f:Nat) in (app (lambda (n:Nat) in (app f 3)) 1)) (lambda (x:Nat) in x + n))) 5)"

interp "app (fix (lambda (ie:Nat) in (lambda (x:Nat) in if (isZero x) then x else x + app ie x - 1))) 4"

interp "app (lambda (x:Bool) in if x then 0 else 444 / 2 + (1 * 7 - 22)) (isZero (if (1 + 5 <= 3) && (true || false) then 0 else 1))"
